import asyncio, json, os, re, logging
from pathlib import Path
from dataclasses import dataclass
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from dotenv import load_dotenv

from retriever import search
from recommender import recommend_electives

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
if not BOT_TOKEN:
    print("Set BOT_TOKEN in .env"); exit(1)

logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

BASE = Path(__file__).parent
SEED = json.load(open(BASE/"data"/"programs_seed.json",encoding="utf-8"))

HELP = (
"–Ø –ø–æ–º–æ–≥—É —Å—Ä–∞–≤–Ω–∏—Ç—å –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û:\n"
"‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n"
"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò‚Äë–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (AI Product)\n\n"
"–ö–æ–º–∞–Ω–¥—ã:\n"
"/compare ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ\n"
"/plan ai|ai_product ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ –ø–æ —É—á–µ–±–Ω–æ–º—É –ø–ª–∞–Ω—É (–µ—Å–ª–∏ —Å–∫–∞—á–∞–Ω)\n"
"/ask <–≤–æ–ø—Ä–æ—Å> ‚Äî –æ—Ç–≤–µ—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º\n"
"/reco ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–ª–µ–∫—Ç–∏–≤–∞–º –ø–æ–¥ –≤–∞—à –±—ç–∫–≥—Ä–∞—É–Ω–¥\n"
)

def allowed_query(q:str)->bool:
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏/—É—á—ë–±–µ/–ø–ª–∞–Ω–∞—Ö
    allow_kw = ["–≤—Å—Ç—É–ø","—ç–∫–∑–∞–º–µ–Ω","—Å—Ç–æ–∏–º","–æ–ø–ª–∞—Ç","–±—é–¥–∂","–ø–ª–∞–Ω","—É—á–µ–±","–ø—Ä–µ–¥–º–µ—Ç","–∫—É—Ä—Å","—Å–µ–º–µ—Å—Ç—Ä",
                "—Ñ–æ—Ä–º–∞—Ç","–æ–Ω–ª–∞–π–Ω","–æ—á–Ω–æ","–∫–∞—Ä—å–µ—Ä–∞","—Ä–æ–ª—å","—Ä–æ–ª—è","–ø—Ä–æ–µ–∫—Ç—ã","—Å—Ç–∏–ø–µ–Ω–¥","–æ–±—â–µ–∂–∏—Ç",
                "–∫–æ–º–ø–∞–Ω–∏—è","–ø–∞—Ä—Ç–Ω–µ—Ä","–≤–∫—Ä","–º–∞–≥–∏—Å—Ç—Ä","–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä","–ø—Ä–æ–≥—Ä–∞–º–º–∞","ai product","–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω"]
    ql = q.lower()
    return any(k in ql for k in allow_kw)

def get_program(slug:str)->Optional[dict]:
    for p in SEED["programs"]:
        if p["slug"]==slug: return p
    return None

@dp.message(CommandStart())
async def start(m:Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! " + HELP)

@dp.message(Command("help"))
async def help_cmd(m:Message):
    await m.answer(HELP)

@dp.message(Command("compare"))
async def compare(m:Message):
    ai = get_program("ai"); ap = get_program("ai_product")
    txt = (
f"<b>–§–æ—Ä–º–∞—Ç</b>\nAI: {ai['format']}\nAI Product: {ap['format']}\n\n"
f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</b>\n–û–±–µ: 2 –≥–æ–¥–∞\n\n"
f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>\n–û–±–µ: {ai['tuition_per_year_rub']:,} ‚ÇΩ / –≥–æ–¥\n\n"
f"<b>–§–æ–∫—É—Å</b>\nAI: –∏–Ω–∂–µ–Ω–µ—Ä–∏—è ML/–¥–∞–Ω–Ω—ã—Ö, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\nAI Product: –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ò–ò‚Äë–ø—Ä–æ–¥—É–∫—Ç–æ–≤ + —Ç–µ—Ö–±–∞–∑–∞\n\n"
f"<b>–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ä–æ–ª–∏</b>\nAI: {', '.join(ai['career_roles'])}\nAI Product: {', '.join(ap['career_roles'])}\n"
    )
    await m.answer(txt)

@dp.message(Command("plan"))
async def plan_cmd(m:Message):
    parts = m.text.strip().split()
    if len(parts)<2 or parts[1] not in ("ai","ai_product"):
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /plan ai  –∏–ª–∏  /plan ai_product")
        return
    slug = parts[1]
    # –ï—Å–ª–∏ JSON –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ—Ç–¥–∞–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    jpath = BASE/"plans"
    files = list(jpath.glob(f"{slug}_*.json"))
    pdfs = list(jpath.glob(f"{slug}_*.pdf"))
    if files:
        await m.answer(f"–ù–∞—à—ë–ª —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –ø–ª–∞–Ω: {files[0].name}. –¢–∞–±–ª–∏—Ü—ã –≤—ã–≥—Ä—É–∂–µ–Ω—ã –∫–∞–∫ CSV —Ä—è–¥–æ–º —Å –Ω–∏–º.")
    elif pdfs:
        await m.answer(f"PDF –ø–ª–∞–Ω–∞ —Å–∫–∞—á–∞–Ω ({pdfs[0].name}), –Ω–æ –µ—â—ë –Ω–µ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
    else:
        await m.answer("–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ–∫–∞ –Ω–µ —Å–∫–∞—á–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scraper.py –∏–ª–∏ playwright_click.py")

@dp.message(Command("ask"))
async def ask_cmd(m:Message):
    q = m.text.partition(" ")[2].strip()
    if not q:
        await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /ask –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è?")
        return
    if not allowed_query(q):
        await m.answer("–û—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–±—É—á–µ–Ω–∏—é/–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –¥–ª—è –¥–≤—É—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û.")
        return
    hits = search(q, topk=3)
    if not hits:
        await m.answer("–í —Ñ–∞–∫—Ç–∞—Ö –ò–¢–ú–û –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –£—Ç–æ—á–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é/—É—á—ë–±–µ.")
        return
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ seed
    facts = []
    for pid,_ in hits:
        p = get_program(pid)
        if not p: continue
        facts.append(f"üîπ <b>{p['title']}</b>: " + "; ".join(p.get("notes",[])))
    await m.answer("\n".join(facts))

@dataclass
class Profile:
    math:str="mid"
    coding:str="junior"
    product:str="junior"
    goals:list=None

profiles = {}

@dp.message(Command("reco"))
async def reco_cmd(m:Message):
    # –ø—Ä–æ—Å—Ç–æ–π state: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∞–Ω–∫–µ—Ç—ã
    await m.answer("–û–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: math=[low|mid|high], coding=[none|junior|mid|senior], product=[none|junior|mid|senior], goals=[ml_engineer|data_engineer|product_manager|data_analyst|ai_research], program=[ai|ai_product]\n\n–ü—Ä–∏–º–µ—Ä:\nmath=mid, coding=junior, product=mid, goals=product_manager;data_analyst, program=ai_product")

@dp.message(F.text.regexp(r"math\s*=\s*(low|mid|high)"))
async def reco_parse(m:Message):
    s = m.text.lower()
    def grab(key, choices):
        m_ = re.search(key+r"\s*=\s*([a-z_ ;]+)", s)
        if not m_: return None
        val = m_.group(1).strip()
        if key=="goals":
            return [x for x in re.split(r"[;, ]+", val) if x]
        return val if val in choices else None
    math = grab("math", ["low","mid","high"]) or "mid"
    coding = grab("coding", ["none","junior","mid","senior"]) or "junior"
    product = grab("product", ["none","junior","mid","senior"]) or "junior"
    goals = grab("goals", []) or []
    program = grab("program", ["ai","ai_product"]) or "ai_product"
    bg = {"math":math,"coding":coding,"product":product,"goals":goals}
    recs = recommend_electives(bg, program)
    if not recs:
        await m.answer("–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –≤–≤–æ–¥–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —ç–ª–µ–∫—Ç–∏–≤–∞–º –Ω–µ –Ω–∞—à–ª–æ—Å—å.")
    else:
        await m.answer("<b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–∫—Ç–∏–≤—ã</b> –¥–ª—è " + program + ":\n‚Ä¢ " + "\n‚Ä¢ ".join(recs))

async def main():
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())
